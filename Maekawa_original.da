from operator import itemgetter
import socket

class Maekawa(DistProcess):
   def _output(msg):
      sock.sendto(bytes(str(self._id) + " " + msg, "UTF-8"), ("54.200.55.63", 59144 ))
      output(str(self._id) + " " + msg)

   def setup(ps, R, quota):
        ts= None
        LockMsgQue= []
        WaitingQue= []
        FailMsgQue= []
        INQsent = False
        cur_locking_request = None
        in_cs= False
        ReleSent = False
        InqSet = set([])
        Locked= False
        req_quota = quota
        item = None
        output(R)
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        
   def cs(task):
       # to enter cs, enque and send request to all, then await replies from all
         --start
         ts= logical_clock()
         _output("requesting. ts="+str(ts))
         for item in R:
            send(Request(ts, self), item)
         
         --wait
         await(len(LockMsgQue)>=len(R))
         in_cs= True
                  
         --cs     
          
         task()
         work()
          

       # to exit cs
         --release

         _output("releasing.")
         for item in R:
               send(Release(self), item)

         in_cs= False

         --end
         LockMsgQue= []
         FailMsgQue= []
         #INQsent = False
         #cur_locking_request = None

         Locked= False
         InqSet = set()
         
   def main():
          def anounce():
               _output("In cs!")
          
          i=0      
          while i< req_quota:
               cs(anounce)
               i+=1
          output(i)
          await(False)  

          
     # when receiving requests from others, enque and reply     
   def OnRequest(ts_j, pj):
       output("onrequest"+str(ts_j)+" "+str(pj))
       if(cur_locking_request == None):
           send(Lock(self), pj)
           cur_locking_request = (ts_j, pj)
           Locked = True
           output("lock" + str(cur_locking_request))
       else:
           WaitingQue.append((ts_j, pj))  #in order
           WaitingQue = sorted(WaitingQue)
           if((ts_j,pj) > (cur_locking_request)):
                send(Fail(self), pj)
                output("fail" + str(pj))
           else:
                if(INQsent == False):
                   send(Inquire(self), cur_locking_request[1])
                   INQsent = True
                   output("inquire" + str(cur_locking_request))

   def OnRelease(pj):
         output("onrelease" + str(pj))
         if(len(WaitingQue)>0):
               (ts, proc)= WaitingQue.pop(0)
               Locked = True
               cur_locking_request= (ts, proc)
               send(Lock(self), proc)
         else:
               Locked = False 
               cur_locking_request= None

   def OnFail(pj):
         output("onfail" + str(pj))
         FailMsgQue.append((pj))
         for proc in InqSet:
            send(Relinquish(self), proc)
            if(proc in LockMsgQue):
                LockMsgQue.remove((proc))
         InqSet = set()

   def OnLock(pj):
         LockMsgQue.append((pj))
         output("onlock" + str(pj) + str(len(LockMsgQue)) + str(LockMsgQue))

   def OnInquire(pj):
           output("oninquire" + str(pj))
           count= len(FailMsgQue)
           if(count>0 ):
               LockMsgQue.remove((pj))
               send(Relinquish(self), pj)

           else:
               InqSet.add(pj)

   def OnRelinquish(pj):
          output("onrelinquish" + str(pj))
          Locked =False
          (ts, proc)=cur_locking_request
          if(proc != pj):
             output("--------proc != pj-------")
             return
          WaitingQue.append((ts, proc))
          WaitingQue = sorted(WaitingQue)
          cur_locking_request= WaitingQue.pop(0)

          Locked= True
          send(Lock(self), cur_locking_request[1])
             
import random

def random_samples(n,total):

        dividers = sorted(random.sample(range(1,total),n-1))
        return [a - b for a, b in zip(dividers + [total], [0] + dividers)]


def main():
     # configuration: number of processes
     # create n process

     #n = int(sys.argv[1]) if len(sys.argv) > 1 else 7
     #request_total = int(sys.argv[2]) if len(sys.argv) >2 else 7
     n= int(input("number of sites: "))
     #n = int(sys.argv[1]) if len(sys.argv) > 1 else 7
     request_total = int(input("total number of requests for all sites: "))
     
     #lists= [[() for x in range(3)] for y in range(7)]
     lists= [[] for y in range(n)]
     
     ps = createprocs(Maekawa, n)
     #request number for each process
     request_quota = random_samples(n,request_total);
     
     
     if n==7:
              para=[[0,3,5], [0,1,4], [0,2,6], [1,3,6], [2,3,4],[1,2,5],[4,5,6]]
              k=0
              for p in ps:
                lists[para[k][0]].append((p))
                lists[para[k][1]].append((p))
                lists[para[k][2]].append((p))
                k = k+1
     elif n==3:
              para=[[0,2], [0,1], [1,2]]
              k=0
              for p in ps:
                lists[para[k][0]].append((p))
                lists[para[k][1]].append((p))
                k = k+1
     elif n==13:
              para=[[0,4,7,10], [0,1,5,6], [0,9,2,8], [0,12,3,11], [4,1,9,12],[4,5,2,3],[4,6,8,11],[7,1,2,11],[7,5,8,12],[7,6,9,3],[10,8,3,1],[10,5,9,11],[10,6,2,12]]
              k=0
              for p in ps:
                lists[para[k][0]].append((p))
                lists[para[k][1]].append((p))
                lists[para[k][2]].append((p))
                lists[para[k][3]].append((p))
                k = k+1
     else:
             return;

     for p,quota,item in zip(ps,request_quota, lists):
        # print("site:",p, "-quorum:", item)
         setupprocs([p], [ps-{p},item,quota])
         
     startprocs(ps)
     for p in ps: p.join()
